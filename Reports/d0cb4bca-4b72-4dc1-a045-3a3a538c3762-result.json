{"name": "test_04", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=117.0.5938.134); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF6CBDE7892+54818]\n\t(No symbol) [0x00007FF6CBD56AC2]\n\t(No symbol) [0x00007FF6CBC0DA3B]\n\t(No symbol) [0x00007FF6CBC1246D]\n\t(No symbol) [0x00007FF6CBC13F5F]\n\t(No symbol) [0x00007FF6CBC14050]\n\t(No symbol) [0x00007FF6CBC546B7]\n\t(No symbol) [0x00007FF6CBC52B99]\n\t(No symbol) [0x00007FF6CBC50968]\n\t(No symbol) [0x00007FF6CBC4FA23]\n\t(No symbol) [0x00007FF6CBC4571F]\n\t(No symbol) [0x00007FF6CBC6EAAA]\n\t(No symbol) [0x00007FF6CBC45036]\n\t(No symbol) [0x00007FF6CBC6ECC0]\n\t(No symbol) [0x00007FF6CBC875A2]\n\t(No symbol) [0x00007FF6CBC6E883]\n\t(No symbol) [0x00007FF6CBC43691]\n\t(No symbol) [0x00007FF6CBC448D4]\n\tGetHandleVerifier [0x00007FF6CC14B992+3610402]\n\tGetHandleVerifier [0x00007FF6CC1A1860+3962352]\n\tGetHandleVerifier [0x00007FF6CC199D4F+3930847]\n\tGetHandleVerifier [0x00007FF6CBE83646+693206]\n\t(No symbol) [0x00007FF6CBD61628]\n\t(No symbol) [0x00007FF6CBD5D934]\n\t(No symbol) [0x00007FF6CBD5DA62]\n\t(No symbol) [0x00007FF6CBD4E113]\n\tBaseThreadInitThunk [0x00007FFB4B3C257D+29]\n\tRtlUserThreadStart [0x00007FFB4D36AA68+40]", "trace": "self = <tests.test_all_test_cases.SalesTest testMethod=test_04>, selector = \"//label[normalize-space()='ZPL Labels']\", by = 'xpath', timeout = 7, delay = 0, scroll = True\n\n    def click(\n        self, selector, by=\"css selector\", timeout=None, delay=0, scroll=True\n    ):\n        self.__check_scope()\n        if not timeout:\n            timeout = settings.SMALL_TIMEOUT\n        if self.timeout_multiplier and timeout == settings.SMALL_TIMEOUT:\n            timeout = self.__get_new_timeout(timeout)\n        original_selector = selector\n        original_by = by\n        selector, by = self.__recalculate_selector(selector, by)\n        if delay and (type(delay) in [int, float]) and delay > 0:\n            time.sleep(delay)\n        if page_utils.is_link_text_selector(selector) or by == By.LINK_TEXT:\n            if not self.is_link_text_visible(selector):\n                # Handle a special case of links hidden in dropdowns\n                self.click_link_text(selector, timeout=timeout)\n                return\n        if (\n            page_utils.is_partial_link_text_selector(selector)\n            or by == By.PARTIAL_LINK_TEXT\n        ):\n            if not self.is_partial_link_text_visible(selector):\n                # Handle a special case of partial links hidden in dropdowns\n                self.click_partial_link_text(selector, timeout=timeout)\n                return\n        if self.__is_shadow_selector(selector):\n            self.__shadow_click(selector, timeout)\n            return\n        if self.__needs_minimum_wait() or self.browser == \"safari\":\n            time.sleep(0.03)\n        element = page_actions.wait_for_element_visible(\n            self.driver,\n            selector,\n            by,\n            timeout=timeout,\n            original_selector=original_selector,\n        )\n        self.__demo_mode_highlight_if_active(original_selector, original_by)\n        if scroll and not self.demo_mode and not self.slow_mode:\n            self.__scroll_to_element(element, selector, by)\n        pre_action_url = self.driver.current_url\n        pre_window_count = len(self.driver.window_handles)\n        try:\n            if (\n                by == By.LINK_TEXT\n                and (self.browser == \"ie\" or self.browser == \"safari\")\n            ):\n                self.__jquery_click(selector, by=by)\n            elif self.browser == \"safari\":\n                self.execute_script(\"arguments[0].click();\", element)\n            else:\n                href = None\n                new_tab = False\n                onclick = None\n                try:\n                    if self.headless and element.tag_name.lower() == \"a\":\n                        # Handle a special case of opening a new tab (headless)\n                        href = element.get_attribute(\"href\").strip()\n                        onclick = element.get_attribute(\"onclick\")\n                        target = element.get_attribute(\"target\")\n                        if target == \"_blank\":\n                            new_tab = True\n                        if new_tab and self.__looks_like_a_page_url(href):\n                            if onclick:\n                                try:\n                                    self.execute_script(onclick)\n                                except Exception:\n                                    pass\n                            current_window = self.driver.current_window_handle\n                            self.open_new_window()\n                            try:\n                                self.open(href)\n                            except Exception:\n                                pass\n                            self.switch_to_window(current_window)\n                            return\n                except Exception:\n                    pass\n                # Normal click\n>               self.__element_click(element)\n\nvenv\\Lib\\site-packages\\seleniumbase\\fixtures\\base_case.py:438: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\seleniumbase\\fixtures\\base_case.py:2851: in __element_click\n    element.click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000242F39BF950>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...07FF6CBD4E113]\\\\n\\\\tBaseThreadInitThunk [0x00007FFB4B3C257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFB4D36AA68+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=117.0.5938.134); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6CBDE7892+54818]\nE       \t(No symbol) [0x00007FF6CBD56AC2]\nE       \t(No symbol) [0x00007FF6CBC0DA3B]\nE       \t(No symbol) [0x00007FF6CBC1246D]\nE       \t(No symbol) [0x00007FF6CBC13F5F]\nE       \t(No symbol) [0x00007FF6CBC14050]\nE       \t(No symbol) [0x00007FF6CBC546B7]\nE       \t(No symbol) [0x00007FF6CBC52B99]\nE       \t(No symbol) [0x00007FF6CBC50968]\nE       \t(No symbol) [0x00007FF6CBC4FA23]\nE       \t(No symbol) [0x00007FF6CBC4571F]\nE       \t(No symbol) [0x00007FF6CBC6EAAA]\nE       \t(No symbol) [0x00007FF6CBC45036]\nE       \t(No symbol) [0x00007FF6CBC6ECC0]\nE       \t(No symbol) [0x00007FF6CBC875A2]\nE       \t(No symbol) [0x00007FF6CBC6E883]\nE       \t(No symbol) [0x00007FF6CBC43691]\nE       \t(No symbol) [0x00007FF6CBC448D4]\nE       \tGetHandleVerifier [0x00007FF6CC14B992+3610402]\nE       \tGetHandleVerifier [0x00007FF6CC1A1860+3962352]\nE       \tGetHandleVerifier [0x00007FF6CC199D4F+3930847]\nE       \tGetHandleVerifier [0x00007FF6CBE83646+693206]\nE       \t(No symbol) [0x00007FF6CBD61628]\nE       \t(No symbol) [0x00007FF6CBD5D934]\nE       \t(No symbol) [0x00007FF6CBD5DA62]\nE       \t(No symbol) [0x00007FF6CBD4E113]\nE       \tBaseThreadInitThunk [0x00007FFB4B3C257D+29]\nE       \tRtlUserThreadStart [0x00007FFB4D36AA68+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_all_test_cases.SalesTest testMethod=test_04>\n\n    def test_04(self):\n>       self.Testcase04()\n\ntests\\test_all_test_cases.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsingle_test_cases\\verify_test_04.py:100: in Testcase04\n    self.click(SalesFlow.labels_5)\nvenv\\Lib\\site-packages\\seleniumbase\\fixtures\\base_case.py:458: in click\n    self.__element_click(element)\nvenv\\Lib\\site-packages\\seleniumbase\\fixtures\\base_case.py:2851: in __element_click\n    element.click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000242F39BF950>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...07FF6CBD4E113]\\\\n\\\\tBaseThreadInitThunk [0x00007FFB4B3C257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFB4D36AA68+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=117.0.5938.134); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6CBDE7892+54818]\nE       \t(No symbol) [0x00007FF6CBD56AC2]\nE       \t(No symbol) [0x00007FF6CBC0DA3B]\nE       \t(No symbol) [0x00007FF6CBC1246D]\nE       \t(No symbol) [0x00007FF6CBC13F5F]\nE       \t(No symbol) [0x00007FF6CBC14050]\nE       \t(No symbol) [0x00007FF6CBC546B7]\nE       \t(No symbol) [0x00007FF6CBC52B99]\nE       \t(No symbol) [0x00007FF6CBC50968]\nE       \t(No symbol) [0x00007FF6CBC4FA23]\nE       \t(No symbol) [0x00007FF6CBC4571F]\nE       \t(No symbol) [0x00007FF6CBC6EAAA]\nE       \t(No symbol) [0x00007FF6CBC45036]\nE       \t(No symbol) [0x00007FF6CBC6ECC0]\nE       \t(No symbol) [0x00007FF6CBC875A2]\nE       \t(No symbol) [0x00007FF6CBC6E883]\nE       \t(No symbol) [0x00007FF6CBC43691]\nE       \t(No symbol) [0x00007FF6CBC448D4]\nE       \tGetHandleVerifier [0x00007FF6CC14B992+3610402]\nE       \tGetHandleVerifier [0x00007FF6CC1A1860+3962352]\nE       \tGetHandleVerifier [0x00007FF6CC199D4F+3930847]\nE       \tGetHandleVerifier [0x00007FF6CBE83646+693206]\nE       \t(No symbol) [0x00007FF6CBD61628]\nE       \t(No symbol) [0x00007FF6CBD5D934]\nE       \t(No symbol) [0x00007FF6CBD5DA62]\nE       \t(No symbol) [0x00007FF6CBD4E113]\nE       \tBaseThreadInitThunk [0x00007FFB4B3C257D+29]\nE       \tRtlUserThreadStart [0x00007FFB4D36AA68+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "attachments": [{"name": "log", "source": "15a75aa7-5261-4226-be51-ad68b8ac282f-attachment.txt", "type": "text/plain"}], "start": 1697057193346, "stop": 1697057315005, "uuid": "968c46de-e67a-4245-af84-79290bfb085a", "historyId": "f3a08bc92f82f5caacd8d1d57fc952c2", "testCaseId": "f3a08bc92f82f5caacd8d1d57fc952c2", "fullName": "tests.test_all_test_cases.SalesTest#test_04", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_all_test_cases"}, {"name": "subSuite", "value": "SalesTest"}, {"name": "host", "value": "DESKTOP-SJITDFO"}, {"name": "thread", "value": "47356-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_all_test_cases"}]}